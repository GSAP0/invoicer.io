package io.invoicer.crm.service;

import io.invoicer.crm.dto.CustomerDto;
import io.invoicer.crm.model.Customer;
import io.invoicer.crm.repository.CustomerRepository;
import io.invoicer.commons.CustomerCreatedEvent;
import lombok.RequiredArgsConstructor;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class CustomerService {

    private final CustomerRepository repository;
    private final KafkaTemplate<String, CustomerCreatedEvent> kafkaTemplate;

    public Customer create(CustomerDto dto) {
        Customer customer = Customer.builder()
        .name(dto.getName())
        .email(dto.getEmail())
        .build();

		repository.save(customer); // âœ… ID auto-generated by DB

        kafkaTemplate.send("customer.created", new CustomerCreatedEvent(
                customer.getId(), customer.getName(), customer.getEmail()
        ));

        return customer;
    }

    public Optional<Customer> getById(String id) {
        return repository.findById(id);
    }

    public List<Customer> getAll() {
        return repository.findAll();
    }

    public Customer update(String id, CustomerDto dto) {
        Customer customer = repository.findById(id)
                .orElseThrow(() -> new RuntimeException("Customer not found"));

        customer.setName(dto.getName());
        customer.setEmail(dto.getEmail());
        repository.save(customer);

        return customer;
    }

    public void delete(String id) {
        repository.deleteById(id);
    }
}
